plugins {
    id 'kotlin-kapt'
    id("com.google.dagger.hilt.android")
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.firebase.appdistribution'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.devtools.ksp'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace 'android.com.demo'
    compileSdk 34

    defaultConfig {
        applicationId "android.com.demo"
        minSdk 24
        targetSdk 34
        versionCode 2
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /*rename bundle file(*.aab)*/
        setProperty("archivesBaseName", "baseApp_" + new Date().format('ddMMyyyy_hhmm_') + versionName)
        ksp {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    /*Rename for apk file*/
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def newApkName = "baseApp_" + new Date().format('yyyyMMdd_hhmm_') + versionName + "_" + variant.buildType.name + ".apk"
            outputFileName = new File(newApkName)
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config

            firebaseAppDistribution {
                serviceCredentialsFile = "$rootDir/service_key_app_distribute.json"
                //releaseNotes="Release notes for demo version"
                releaseNotesFile = "$rootDir/ReleaseNote/notes.txt"
                testers = "tri.nguyen833@gmail.com"
            }
        }
        staging {
            initWith debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = 17
    }
    buildFeatures {
        dataBinding true
        buildConfig true
    }

}


dependencies {

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.6.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.5.0'
    implementation 'com.google.firebase:firebase-storage:20.3.0'
    implementation 'com.google.firebase:firebase-auth:22.3.0'
    implementation 'com.google.firebase:firebase-config:21.6.0'
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'

    implementation("com.google.dagger:hilt-android:2.49")
    kapt("com.google.dagger:hilt-android-compiler:2.48")

    //Log
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'

    //coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"

    //read barcode
    //implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    //room
    def room_version = "2.5.0"
    //noinspection GradleDependency
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    debugImplementation("com.github.chuckerteam.chucker:library:4.0.0") {
        exclude group: "com.google.android.material", module: "material"
    }
    stagingImplementation("com.github.chuckerteam.chucker:library:4.0.0") {
        exclude group: "com.google.android.material", module: "material"
    }
    releaseImplementation 'com.github.chuckerteam.chucker:library-no-op:4.0.0'

    implementation 'com.amplifyframework:aws-analytics-pinpoint:2.14.5'
    implementation 'com.amplifyframework:aws-auth-cognito:2.14.6'

    implementation 'com.amplifyframework:aws-auth-cognito:2.14.6'

    implementation 'androidx.biometric:biometric:1.1.0'
}

// Allow references to generated code
kapt {
    correctErrorTypes = true
}